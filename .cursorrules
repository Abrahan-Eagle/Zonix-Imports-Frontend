rules:
  - type: project
    value: |
      Proyecto: MVP de e-commerce multi-modal (Frontend Flutter) alineado con el Backend Laravel 10.
      Visión: Catálogo público, carrito, checkout, pagos (API y manuales), gestión de productos del vendedor y pedidos.

      Roles principales (UI):
      - Visitante: catálogo público (solo lectura)
      - Comprador: login con Google, carrito, checkout, pedidos, notificaciones
      - Vendedor: publicación de productos, inventario básico, gestión de pedidos
      - Admin (mínimo): vistas básicas (puede resolverse en backend web)

  - type: coding
    value: |
      Estándares y convenciones (Frontend Flutter):
      - Flutter/Dart 3.x. Respetar analysis_options.yaml
      - Arquitectura: MVVM + Provider (o Riverpod si se migra), servicios HTTP en lib/services
      - Código: nombres descriptivos, evitar abreviaturas, manejo explícito de errores
      - UI: componentes reutilizables; loading y error states consistentes
      - Estado: Provider centralizado por feature; no lógica de negocio en widgets puros
      - Red: timeouts razonables, reintentos básicos, headers `{ Authorization: Bearer <token> }`
      - Seguridad: tokens en flutter_secure_storage; sin logs de PII/tokens
      - Internacionalización: preparada (post-MVP si no está)

  - type: api_contract
    value: |
      Endpoints mínimos consumidos (prefijo /api del backend):
      - Auth:
        - POST /auth/google
        - GET /me
        - PUT /me/role
      - Productos/Catálogo:
        - GET /products?filters...
        - CRUD /products (vendedor)
        - POST /products/{id}/images
      - Carrito/Checkout:
        - POST /cart, GET /cart, PUT /cart/{item}, DELETE /cart/{item}
        - POST /checkout
      - Pagos:
        - GET /payments/methods
        - POST /payments/stripe|paypal|binance
        - POST /payments/comprobante
        - POST /webhooks/{provider}
      - Pedidos/Tracking:
        - GET /orders
        - GET /seller/orders
        - PUT /seller/orders/{id}/status
        - GET /orders/{id}/tracking
      - Notificaciones:
        - GET /notifications
        - PUT /notifications/{id}/read

      Contrato:
      - Autenticación: Authorization: Bearer <token> (Sanctum)
      - Paginación: ?page=N&per_page=M → { data, meta: { current_page, per_page, total } }
      - Errores: { message, errors?, code }
      - Fechas: ISO 8601 (UTC)

  - type: tasks
    value: |
      MVP Frontend (alineado):
      - Auth Google + perfil básico
      - Catálogo con modalidades (detal, mayor, pre-order, referidos, dropshipping)
      - Carrito + Checkout
      - Pagos (API y manuales)
      - Pedidos (lista/detalle/seguimiento)
      - Notificaciones (lista + marcar leídas)
      - Módulo vendedor mínimo (CRUD productos + inventario básico)

  - type: contribution
    value: |
      Contribución:
      - Commits convencionales (feat, fix, refactor, docs, chore)
      - PRs pequeñas con checklist; ejecutar `flutter test`
      - No exponer secretos; variables en config/env

  - type: integration
    value: |
      Integración con Backend:
      - `API_BASE_URL` apuntando a `/api`
      - CORS habilitado en backend para la app
      - Tokens: guardar/renovar; cerrar sesión limpia
      - Manejo de errores unificado y mapeo de `errors` a formularios
 
